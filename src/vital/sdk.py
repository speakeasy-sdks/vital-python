"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .insurance import Insurance
from .lab_tests import LabTests
from .link import Link
from .order import Order
from .orders import Orders
from .physician import Physician
from .providers import Providers
from .sdkconfiguration import SDKConfiguration
from .summary import Summary
from .team import Team
from .timeseries import Timeseries
from .user import User
from vital import utils
from vital.models import errors, operations

class Vital:
    r"""Vital API: API for at-home health Wearables and Lab test API for digital health companies."""
    insurance: Insurance
    lab_tests: LabTests
    link: Link
    order: Order
    orders: Orders
    physician: Physician
    providers: Providers
    summary: Summary
    team: Team
    timeseries: Timeseries
    user: User

    sdk_configuration: SDKConfiguration

    def __init__(self,
                 server_idx: int = None,
                 server_url: str = None,
                 url_params: dict[str, str] = None,
                 client: requests_http.Session = None,
                 retry_config: utils.RetryConfig = None
                 ) -> None:
        """Instantiates the SDK configuring it with the provided parameters.
        
        :param server_idx: The index of the server to use for all operations
        :type server_idx: int
        :param server_url: The server URL to use for all operations
        :type server_url: str
        :param url_params: Parameters to optionally template the server URL with
        :type url_params: dict[str, str]
        :param client: The requests.Session HTTP client to use for all operations
        :type client: requests_http.Session
        :param retry_config: The utils.RetryConfig to use globally
        :type retry_config: utils.RetryConfig
        """
        if client is None:
            client = requests_http.Session()
        
        security_client = client
        
        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        self.sdk_configuration = SDKConfiguration(client, security_client, server_url, server_idx, retry_config=retry_config)
       
        self._init_sdks()
    
    def _init_sdks(self):
        self.insurance = Insurance(self.sdk_configuration)
        self.lab_tests = LabTests(self.sdk_configuration)
        self.link = Link(self.sdk_configuration)
        self.order = Order(self.sdk_configuration)
        self.orders = Orders(self.sdk_configuration)
        self.physician = Physician(self.sdk_configuration)
        self.providers = Providers(self.sdk_configuration)
        self.summary = Summary(self.sdk_configuration)
        self.team = Team(self.sdk_configuration)
        self.timeseries = Timeseries(self.sdk_configuration)
        self.user = User(self.sdk_configuration)
    
    def robots_robots_txt_get(self) -> operations.RobotsRobotsTxtGetResponse:
        r"""Robots"""
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/robots.txt'
        headers = {}
        headers['Accept'] = 'text/plain'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        client = self.sdk_configuration.client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.RobotsRobotsTxtGetResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'text/plain'):
                res.robots_robots_txt_get_200_text_plain_string = http_res.content
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    