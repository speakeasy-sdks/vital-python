"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from typing import List, Optional
from vital import utils


@dataclasses.dataclass
class Map:
    r"""Map of workouts encoded as polyline"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientFacingWorkoutSource:
    r"""Source summarizes where a sample or a summary is sourced from.
    At minimum, the source provider is always included.
    """
    logo: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""Provider slug. e.g., `oura`, `fitbit`, `garmin`."""
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id'), 'exclude': lambda f: f is None }})
    r"""The identifier of the app which recorded this summary. This is only applicable to multi-source providers like Apple Health and Android Health Connect."""
    type: Optional[str] = dataclasses.field(default='unknown', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the data source (app or device) by which the summary or the timeseries data were recorded. This defaults to `unknown` when Vital cannot extract or infer that information"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientFacingWorkoutClientFacingSport:
    r"""Sport's name"""
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Sport's name"""
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Slug for designated sport"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientFacingWorkout:
    calendar_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendar_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""Date of the workout summary in the YYYY-mm-dd format. This generally matches the workout start date."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    provider_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider_id') }})
    r"""Provider ID given for that specific workout"""
    source: ClientFacingWorkoutSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Source the data has come from."""
    time_end: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_end'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""End time of the workout::time"""
    time_start: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('time_start'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Start time of the workout::time"""
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})
    r"""User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api."""
    average_hr: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average_hr'), 'exclude': lambda f: f is None }})
    r"""Average heart rate during workout::bpm"""
    average_speed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average_speed'), 'exclude': lambda f: f is None }})
    r"""Average speed during workout in m/s::meters/sec"""
    average_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('average_watts'), 'exclude': lambda f: f is None }})
    r"""Average watts burned during exercise::watts"""
    calories: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calories'), 'exclude': lambda f: f is None }})
    r"""Calories burned during the workout::kCal"""
    device_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('device_watts'), 'exclude': lambda f: f is None }})
    r"""Watts burned during exercise::watts"""
    distance: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('distance'), 'exclude': lambda f: f is None }})
    r"""Distance travelled during workout::meters"""
    elev_high: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elev_high'), 'exclude': lambda f: f is None }})
    r"""Highest point of elevation::meters"""
    elev_low: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('elev_low'), 'exclude': lambda f: f is None }})
    r"""Lowest point of elevation::meters"""
    hr_zones: Optional[List[int]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hr_zones'), 'exclude': lambda f: f is None }})
    r"""Time in seconds spent in different heart rate zones <50%, 50-60%, 60-70%, 70-80%, 80-90%, 90%+. Due to rounding errors, it's possible that summing all values is different than the total time of the workout. Not available for all providers::seconds"""
    map: Optional[Map] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('map'), 'exclude': lambda f: f is None }})
    r"""Map of workouts encoded as polyline"""
    max_hr: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_hr'), 'exclude': lambda f: f is None }})
    r"""Max heart rate during workout::bpm"""
    max_speed: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_speed'), 'exclude': lambda f: f is None }})
    r"""Max speed during workout in m/s::meters/sec"""
    max_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('max_watts'), 'exclude': lambda f: f is None }})
    r"""Max watts burned during exercise::watts"""
    moving_time: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('moving_time'), 'exclude': lambda f: f is None }})
    r"""Time spent active during the workout::seconds"""
    sport: Optional[ClientFacingWorkoutClientFacingSport] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('sport'), 'exclude': lambda f: f is None }})
    r"""Sport's name"""
    timezone_offset: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timezone_offset'), 'exclude': lambda f: f is None }})
    r"""Timezone offset from UTC as seconds. For example, EEST (Eastern European Summer Time, +3h) is 10800. PST (Pacific Standard Time, -8h) is -28800::seconds"""
    title: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('title'), 'exclude': lambda f: f is None }})
    r"""Title given for the workout"""
    total_elevation_gain: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('total_elevation_gain'), 'exclude': lambda f: f is None }})
    r"""Elevation gain during the workout::meters"""
    weighted_average_watts: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weighted_average_watts'), 'exclude': lambda f: f is None }})
    r"""Weighted average watts burned during exercise::watts"""
    

