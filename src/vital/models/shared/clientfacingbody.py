"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import dateutil.parser
from ..shared import clientfacingsource as shared_clientfacingsource
from dataclasses_json import Undefined, dataclass_json
from datetime import date, datetime
from typing import Optional
from vital import utils


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ClientFacingBody:
    calendar_date: date = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('calendar_date'), 'encoder': utils.dateisoformat(False), 'decoder': utils.datefromisoformat }})
    r"""Date of the summary in the YYYY-mm-dd format."""
    date_: datetime = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('date'), 'encoder': utils.datetimeisoformat(False), 'decoder': dateutil.parser.isoparse }})
    r"""Date of the specified record, formatted as ISO8601 datetime string in UTC 00:00. Deprecated in favour of calendar_date.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    source: shared_clientfacingsource.ClientFacingSource = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    r"""Source summarizes where a sample or a summary is sourced from.
    At minimum, the source provider is always included.
    """
    user_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('user_id') }})
    r"""User id returned by vital create user request. This id should be stored in your database against the user and used for all interactions with the vital api."""
    fat: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fat'), 'exclude': lambda f: f is None }})
    r"""Body fat percentage::perc"""
    weight: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('weight'), 'exclude': lambda f: f is None }})
    r"""Weight in kg::kg"""
    

