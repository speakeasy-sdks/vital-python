"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from typing import Optional
from vital import utils


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ClientFacingSource:
    r"""Source summarizes where a sample or a summary is sourced from.
    At minimum, the source provider is always included.
    """
    logo: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logo') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    provider: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('provider') }})
    r"""Provider slug. e.g., `oura`, `fitbit`, `garmin`."""
    slug: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('slug') }})
    r"""Deprecated.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    app_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('app_id'), 'exclude': lambda f: f is None }})
    r"""The identifier of the app which recorded this summary. This is only applicable to multi-source providers like Apple Health and Android Health Connect."""
    type: Optional[str] = dataclasses.field(default='unknown', metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    r"""The type of the data source (app or device) by which the summary or the timeseries data were recorded. This defaults to `unknown` when Vital cannot extract or infer that information"""
    

