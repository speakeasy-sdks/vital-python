"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from .sdkconfiguration import SDKConfiguration
from typing import List, Optional
from vital import utils
from vital._hooks import HookContext
from vital.models import errors, operations, shared

class Timeseries:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def get_blood_oxygen(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodOxygenGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__blood_oxygen_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodOxygenGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodOxygenGetRequest, base_url, '/v2/timeseries/{user_id}/blood_oxygen', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodOxygenGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodOxygenGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingBloodOxygenTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_blood_oxygen_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_blood_pressure(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodPressureGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__blood_pressure_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodPressureGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodPressureGetRequest, base_url, '/v2/timeseries/{user_id}/blood_pressure', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodPressureGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDBloodPressureGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingBloodPressureTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_blood_pressure_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_caffeine(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaffeineGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__caffeine_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaffeineGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaffeineGetRequest, base_url, '/v2/timeseries/{user_id}/caffeine', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaffeineGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaffeineGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCaffeineTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_caffeine_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_calories_active(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesActiveGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__calories_active_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesActiveGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesActiveGetRequest, base_url, '/v2/timeseries/{user_id}/calories_active', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesActiveGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesActiveGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCaloriesActiveTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_calories_active_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_calories_basal(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesBasalGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__calories_basal_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesBasalGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesBasalGetRequest, base_url, '/v2/timeseries/{user_id}/calories_basal', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesBasalGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCaloriesBasalGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCaloriesBasalTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_calories_basal_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_cholesterol_all(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolGetRequest, base_url, '/v2/timeseries/{user_id}/cholesterol', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCholesterolTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_cholesterol_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_cholesterol_hdl(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolHdlGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_hdl_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolHdlGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolHdlGetRequest, base_url, '/v2/timeseries/{user_id}/cholesterol/hdl', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolHdlGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolHdlGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCholesterolTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_cholesterol_hdl_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_cholesterol_ldl(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolLdlGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_ldl_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolLdlGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolLdlGetRequest, base_url, '/v2/timeseries/{user_id}/cholesterol/ldl', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolLdlGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolLdlGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCholesterolTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_cholesterol_ldl_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_distance(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDDistanceGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__distance_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDDistanceGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDDistanceGetRequest, base_url, '/v2/timeseries/{user_id}/distance', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDDistanceGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDDistanceGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingDistanceTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_distance_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_floors_climbed(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDFloorsClimbedGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__floors_climbed_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDFloorsClimbedGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDFloorsClimbedGetRequest, base_url, '/v2/timeseries/{user_id}/floors_climbed', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDFloorsClimbedGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDFloorsClimbedGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingFloorsClimbedTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_floors_climbed_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_glucose(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDGlucoseGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__glucose_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDGlucoseGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDGlucoseGetRequest, base_url, '/v2/timeseries/{user_id}/glucose', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDGlucoseGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDGlucoseGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingGlucoseTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_glucose_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_heartrate(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDHeartrateGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__heartrate_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHeartrateGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHeartrateGetRequest, base_url, '/v2/timeseries/{user_id}/heartrate', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHeartrateGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHeartrateGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingHeartRateTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_heartrate_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hrv(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDHrvGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__hrv_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHrvGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHrvGetRequest, base_url, '/v2/timeseries/{user_id}/hrv', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHrvGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHrvGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingHRVTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_hrv_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_hypnogram(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDHypnogramGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__hypnogram_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHypnogramGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHypnogramGetRequest, base_url, '/v2/timeseries/{user_id}/hypnogram', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDHypnogramGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDHypnogramGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingHypnogramTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_hypnogram_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_ige(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDIgeGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__ige_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDIgeGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDIgeGetRequest, base_url, '/v2/timeseries/{user_id}/ige', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDIgeGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDIgeGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingIgeTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_ige_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_igg(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDIggGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__igg_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDIggGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDIggGetRequest, base_url, '/v2/timeseries/{user_id}/igg', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDIggGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDIggGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingIggTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_igg_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_mindfulness_minutes(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDMindfulnessMinutesGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__mindfulness_minutes_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDMindfulnessMinutesGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDMindfulnessMinutesGetRequest, base_url, '/v2/timeseries/{user_id}/mindfulness_minutes', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDMindfulnessMinutesGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDMindfulnessMinutesGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingMindfulnessMinutesTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_mindfulness_minutes_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_respiratory_rate(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDRespiratoryRateGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__respiratory_rate_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDRespiratoryRateGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDRespiratoryRateGetRequest, base_url, '/v2/timeseries/{user_id}/respiratory_rate', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDRespiratoryRateGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDRespiratoryRateGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingRespiratoryRateTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_respiratory_rate_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_steps(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDStepsGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__steps_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDStepsGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDStepsGetRequest, base_url, '/v2/timeseries/{user_id}/steps', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDStepsGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDStepsGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingStepsTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_steps_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_total_cholesterol(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTotalGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_total_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTotalGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTotalGetRequest, base_url, '/v2/timeseries/{user_id}/cholesterol/total', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTotalGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTotalGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCholesterolTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_cholesterol_total_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_triglycerides(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTriglyceridesGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__cholesterol_triglycerides_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTriglyceridesGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTriglyceridesGetRequest, base_url, '/v2/timeseries/{user_id}/cholesterol/triglycerides', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTriglyceridesGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDCholesterolTriglyceridesGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingCholesterolTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_cholesterol_triglycerides_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_user_sleep_stream(self, sleep_id: str) -> operations.GetUserSleepStreamV2TimeseriesSleepSleepIDStreamGetResponse:
        r"""Get User Sleep Stream
        Get Sleep stream for a user_id
        """
        hook_ctx = HookContext(operation_id='get_user_sleep_stream_v2_timeseries_sleep__sleep_id__stream_get', oauth2_scopes=[], security_source=None)
        request = operations.GetUserSleepStreamV2TimeseriesSleepSleepIDStreamGetRequest(
            sleep_id=sleep_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetUserSleepStreamV2TimeseriesSleepSleepIDStreamGetRequest, base_url, '/v2/timeseries/sleep/{sleep_id}/stream', request)
        
        headers = {}
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetUserSleepStreamV2TimeseriesSleepSleepIDStreamGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientFacingSleepStream])
                res.client_facing_sleep_stream = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_user_workouts(self, workout_id: str) -> operations.GetUserWorkoutsV2TimeseriesWorkoutsWorkoutIDStreamGetResponse:
        r"""Get User Workouts"""
        hook_ctx = HookContext(operation_id='get_user_workouts_v2_timeseries_workouts__workout_id__stream_get', oauth2_scopes=[], security_source=None)
        request = operations.GetUserWorkoutsV2TimeseriesWorkoutsWorkoutIDStreamGetRequest(
            workout_id=workout_id,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetUserWorkoutsV2TimeseriesWorkoutsWorkoutIDStreamGetRequest, base_url, '/v2/timeseries/workouts/{workout_id}/stream', request)
        
        headers = {}
        
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetUserWorkoutsV2TimeseriesWorkoutsWorkoutIDStreamGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[shared.ClientFacingStream])
                res.client_facing_stream = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def get_water(self, start_date: str, user_id: str, end_date: Optional[str] = None, provider: Optional[str] = None) -> operations.GetTimeseriesResourceDataV2TimeseriesUserIDWaterGetResponse:
        r"""Get Timeseries Resource Data
        Get timeseries data for user
        """
        hook_ctx = HookContext(operation_id='get_timeseries_resource_data_v2_timeseries__user_id__water_get', oauth2_scopes=[], security_source=None)
        request = operations.GetTimeseriesResourceDataV2TimeseriesUserIDWaterGetRequest(
            start_date=start_date,
            user_id=user_id,
            end_date=end_date,
            provider=provider,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.GetTimeseriesResourceDataV2TimeseriesUserIDWaterGetRequest, base_url, '/v2/timeseries/{user_id}/water', request)
        
        headers = {}
        query_params = {}
        
        query_params = { **utils.get_query_params(operations.GetTimeseriesResourceDataV2TimeseriesUserIDWaterGetRequest, request), **query_params }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('GET', url, params=query_params, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.GetTimeseriesResourceDataV2TimeseriesUserIDWaterGetResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[List[shared.ClientFacingWaterTimeseries]])
                res.response_get_timeseries_resource_data_v2_timeseries_user_id_water_get = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_blood_pressure(self, user_id: str, x_vital_android_sdk_version: Optional[str] = None, x_vital_ios_sdk_version: Optional[str] = None) -> operations.PostUserBloodPressureV2TimeseriesUserIDBloodPressurePostResponse:
        r"""Post User Blood Pressure"""
        hook_ctx = HookContext(operation_id='post_user_blood_pressure_v2_timeseries__user_id__blood_pressure_post', oauth2_scopes=[], security_source=None)
        request = operations.PostUserBloodPressureV2TimeseriesUserIDBloodPressurePostRequest(
            user_id=user_id,
            x_vital_android_sdk_version=x_vital_android_sdk_version,
            x_vital_ios_sdk_version=x_vital_ios_sdk_version,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostUserBloodPressureV2TimeseriesUserIDBloodPressurePostRequest, base_url, '/v2/timeseries/{user_id}/blood_pressure', request)
        
        headers = {}
        
        headers = { **utils.get_headers(request), **headers }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostUserBloodPressureV2TimeseriesUserIDBloodPressurePostResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[str])
                res.response_post_user_blood_pressure_v2_timeseries_user_id_blood_pressure_post = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    
    
    def post_vitals(self, resource: shared.IngestibleTimeseriesResource, user_id: str, x_vital_android_sdk_version: Optional[str] = None, x_vital_ios_sdk_version: Optional[str] = None) -> operations.PostUserVitalsV2TimeseriesUserIDResourcePostResponse:
        r"""Post User Vitals"""
        hook_ctx = HookContext(operation_id='post_user_vitals_v2_timeseries__user_id___resource__post', oauth2_scopes=[], security_source=None)
        request = operations.PostUserVitalsV2TimeseriesUserIDResourcePostRequest(
            resource=resource,
            user_id=user_id,
            x_vital_android_sdk_version=x_vital_android_sdk_version,
            x_vital_ios_sdk_version=x_vital_ios_sdk_version,
        )
        
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = utils.generate_url(operations.PostUserVitalsV2TimeseriesUserIDResourcePostRequest, base_url, '/v2/timeseries/{user_id}/{resource}', request)
        
        headers = {}
        
        headers = { **utils.get_headers(request), **headers }
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        client = self.sdk_configuration.client
        
        try:
            req = self.sdk_configuration.get_hooks().before_request(
                hook_ctx, 
                requests_http.Request('POST', url, headers=headers).prepare(),
            )
            http_res = client.send(req)
        except Exception as e:
            _, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, None, e)
            raise e

        if utils.match_status_codes(['422','4XX','5XX'], http_res.status_code):
            http_res, e = self.sdk_configuration.get_hooks().after_error(hook_ctx, http_res, None)
            if e:
                raise e
        else:
            result = self.sdk_configuration.get_hooks().after_success(hook_ctx, http_res)
            if isinstance(result, Exception):
                raise result
            http_res = result
        
        
        res = operations.PostUserVitalsV2TimeseriesUserIDResourcePostResponse(status_code=http_res.status_code, content_type=http_res.headers.get('Content-Type'), raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, Optional[str])
                res.response_post_user_vitals_v2_timeseries_user_id_resource_post = out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code == 422:
            if utils.match_content_type(http_res.headers.get('Content-Type'), 'application/json'):                
                out = utils.unmarshal_json(http_res.text, errors.HTTPValidationError)
                raise out
            else:
                content_type = http_res.headers.get('Content-Type')
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)
        else:
            raise errors.SDKError('unknown status code received', http_res.status_code, http_res.text, http_res)

        return res

    